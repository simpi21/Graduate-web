


// Background color
@each $name, $color in $theme-colors { 

// Background color and colors. dark and light also on hover
  
  .bg-#{$name}{
      background-color:$color;
  }
  
  .hover#{"\\:"}bg-#{$name}{
     &:hover {
       background: $color !important;
       color: #fff !important;
       border-color: $color !important;
     }
   }

}



// Opacity background 
  @for $i from 1 through 9{
  .bg-primary-0_#{$i}{
     background-color: rgba(map-get($theme-colors, primary), $i/10) !important; 
  }
}
  
  @for $i from 1 through 9{
  .bg-success-0_#{$i}{
     background-color: rgba(map-get($theme-colors, success), $i/10) !important; 
  }
}
  
  @for $i from 1 through 9{
  .bg-info-0_#{$i}{
     background-color: rgba(map-get($theme-colors, info), $i/10) !important; 
  }
}
  
  @for $i from 1 through 9{
  .bg-warning-0_#{$i}{
     background-color: rgba(map-get($theme-colors, warning), $i/10) !important; 
  }
}
  
  @for $i from 1 through 9{
  .bg-danger-0_#{$i}{
     background-color: rgba(map-get($theme-colors, danger), $i/10) !important; 
  }
}



// Bootstrap overwrite colors
.text-primary {
  color: map-get($theme-colors, primary) !important;
}
.text-success {
    color: map-get($theme-colors, success) !important;
} 
.text-info {
  color: map-get($theme-colors, info) !important;
} 
.text-warning {
  color: map-get($theme-colors, warning) !important;
}
.text-danger {
  color: map-get($theme-colors, danger) !important;
}
.text-dark {
  color: map-get($theme-colors, dark) !important;
}
.text-light{
  color: map-get($theme-colors, light) !important;
}

.bg-primary {
  background-color: map-get($theme-colors, primary) !important;
  color: #fff;
}
.bg-success {
  background-color: map-get($theme-colors, success) !important;
  color:#fff;
}
.bg-info {
  background-color: map-get($theme-colors, info) !important; 
  color:#fff;
}
.bg-warning {
  background-color: map-get($theme-colors, warning) !important;
  color:#fff;
}
.bg-danger {
  background-color: map-get($theme-colors, danger) !important;
  color:#fff;
}
.bg-dark {
 background-color: map-get($theme-colors, dark) !important; 
  color:#fff;
}

 

// Gray background 




// Text color

.text-gray-darkest {
  color: #606065 !important;
}
.text-gray-darker {
  color: #72727a !important;
}

.text-gray-dark {
   color: #7a7a83 !important;
}

.text-gray {
  color: #8f8f93 !important;
}

.text-gray-light {
  color: #a5a5ac !important;

}
.text-gray-lighter {
  color: #b7b7bf !important;
}

.text-gray-lightest {
  color: #cbcbd3 !important;
}

@for $i from 1 through 9{
  .text-white-0_#{$i}{
     color: rgba(#fff, $i/10) !important;  
  }
}

@for $i from 1 through 9{
  .text-black-0_#{$i}{
     color: rgba(#000, $i/10) !important; 
  }
}



// light Background
.bg-light-v1 {
	background-color: #F9F9F9 !important;
}

.bg-light-v2 {
	background-color: #f1f3f7 !important;
}

.bg-light-v3 {
	background-color: #ECF5FE !important;
}

.bg-light-v4 {
	background-color: #f3f6fb !important;
}

.bg-light-v5 {
	background-color: #F3F6FB !important;
}




// Bg primary opacity 
@for $i from 1 through 9{
  .bg-primary-0_#{$i}{
     background: rgba(color(primary, base), $i/10) !important;  
  }
}
// Bg white opacity 
@for $i from 1 through 9{
  .bg-white-0_#{$i}{
     background: rgba(#fff, $i/10) !important;  
  }
}

// Bg black opacity 
@for $i from 1 through 9{
  .bg-black-0_#{$i}{
     background: rgba(#000, $i/10) !important;  
  }
}


  
  
// dark overlay
[data-dark-overlay],
[data-primary-overlay]{
  position: relative;
  z-index: 1;
  &:after{
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }
}

@for $i from 1 through 9{
  [data-dark-overlay="#{$i}"]{
    &:after{
     background: rgba(#000, $i/10);
    }
  }
}

@for $i from 1 through 9{
  [data-primary-overlay="#{$i}"]{
    &:after{
     background: rgba(map-get($theme-colors, primary), $i/10);
    }
  }
}
  
  
  
  
  
  
  
  
  
  